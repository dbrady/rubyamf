This is some documentation that will be on the Wiki eventually. For here now




Rails Integration is now possible, and it's dead simple.

Installation:
1. Put the entire rubyamf folder into your applications vendor/plugins directory.
2. Put the rubyamf/services/rubyamf_controller.rb file into your rails application /app/controllers directory
3. Start Rails, ruby script/start
4. The gateway is here: http://localhost:3000/rubyamf/gateway

Usage Examples:

#An example User controller with a couple remoting methods in it
----------------------------------
class UserController < ActionController::Base
	def list
		if @is_rubyamf						#use the is_rubyamf member variable to sniff rubyamf requests. it's an instance var so that no exceptions are thrown when using it
			return User.find(:all)  #just return the value for Flash
		else
			#process html,xml,rss, etc
		end
	end
	
	def show
		if @is_rubyamf			
			return User.find(params[0]) #remoting parameters get mapped to the params[] hash
		else
			#process html,xml,rss, etc
		end
	end
end
----------------------------------



#Flex 2 with SSR example    //ssr.riaforge.org
------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import org.rubyamf.remoting.ssr.*;   //ssr.riaforge.org
			import fl.data.DataProvider;
			
			private var service:RemotingService;
			
			private function init():void
			{
				service = new RemotingService('http://localhost:3000/rubyamf/gateway','UserController',3)
				service.addEventListener(FaultEvent.CONNECTION_ERROR, handleConnectionError)
				
				//make the call 
				service.list([],onList,onListFault,{maxAttempts:3, timeout:5000, returnArgs:true})
			}
			
			private function handleConnectionError(fe:FaultEvent):void
			{
				trace("connection error")
			}
			
			private function onList(re:ResultEvent, args:*):void
			{
				//re.result is an array of objects, so you can supply that as a valid DataProvider
				myDataGrid.dataProvider = new DataProvider(re.result); //populate a grid, or some component
			}
			
			private function onListFault(fe:FaultEvent, args:*)
			{
				trace("FAULT")
				trace(fe.fault.faultString);
			}
			]]>
		</mx:Script>
	<mx:DataDrid id="myDataGrid" width="200" height="200" />
</mx:Application>
--------------------------------------



#Flex with RemoteObject example
--------------------------------------

------------Services config:
<?xml version="1.0" encoding="UTF-8"?>
<services-config>
	<services>
		<service id="rubyamf-flashremoting-service" class="flex.messaging.services.RemotingService" messageTypes="flex.messaging.messages.RemotingMessage">
			<destination id="rubyamf">
				<channels>
					<channel ref="rubyamf"/>
				</channels>
				<properties>
					<source>*</source>
				</properties>
			</destination>
		</service>
	</services>
	<channels>
		<channel-definition id="rubyamf" class="mx.messaging.channels.AMFChannel">
				<endpoint uri="http://localhost:3000/rubyamf/gateway" class="flex.messaging.endpoints.AMFEndpoint"/>
		</channel-definition>
	</channels>
</services-config>


-------------MXML FILE:
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
			<![CDATA[
				import mx.managers.CursorManager;
				import mx.rpc.events.ResultEvent;
				import mx.rpc.events.FaultEvent;
				
				private function handleArray(re:ResultEvent):void
				{
					CursorManager.removeBusyCursor();
					result_ta.text = "Got Array\n"
					result_ta.text += typeof(re.result) + "\n"
					result_ta.text += re.result[0] + "\n" 
					result_ta.text += re.result.toString();
				}
				
				private function faultHandler(fe:FaultEvent):void
				{
					CursorManager.removeBusyCursor();
					result_ta.text = fe.fault.faultString;
				}
				
			]]>
	</mx:Script>
	<mx:RemoteObject id="rubyamfService" fault="faultHandler(event)" showBusyCursor="true" source="MyController" destination="rubyamf">
		<mx:method name="getArray" result="handleArray(event)" />
	</mx:RemoteObject>
	
	<mx:TextArea width="100%" height="100%" id="result_ta" />
	<mx:Button x="136" y="186" label="getArray" width="118" id="getArray" click="rubyamfService.getOperation('getArray').send()" />
</mx:Application>
-----------------------------------

--------MyController.rb
class MyController < ApplicationController
 	def getArray
		return ["hello","world"]
 	end
end
-------------------------------------



#FLASH 9 - Here is an example remoting call onto the UserController
-----------------------------------
import org.rubyamf.remoting.ssr.*; 	//ssr.riaforge.org
import fl.data.DataProvider;

//set up the service
var service = new RemotingService('http://localhost:3000/rubyamf/gateway','UserController',3)

service.addEventListener(FaultEvent.CONNECTION_ERROR, handleConnectionError)
function handleConnectionError(fe:FaultEvent){ //handle a failuer to connect}

//make a service call
service.list([],onList, onListFault)

function onList(re:ResultEvent)
{
	myDataGrid.dataProvider = new DataProvider(re.result)
}

function onListFault(fe:FaultEvent)
{
	trace("FAULT");
	trace(fe.fault.faultString);
}
-----------------------------------


#FLASH 8 - Here is an example remoting call onto the UserController
-----------------------------------
import cinqetdemi.remoting.*      //search google for cinqetdemi remoting package
import mx.remoting.RecordSet;

//set up the service
var service = new RemotingService('http://localhost:3000/rubyamf/gateway','UserController')

service.addEventListener(FaultEvent.CONNECTION_ERROR, handleConnectionError)
function handleConnectionError(fe:FaultEvent){ //handle a failuer to connect}

//make a service call
service.list([], this, onList, onListFault)

function onList(re:ResultEvent)
{
	myDataGrid.dataProvider = new DataProvider(re.result)
}

function onListFault(fe:FaultEvent)
{
	trace("FAULT");
	trace(fe.fault.message);
}
-----------------------------------